{
  "$id": "https://identity.foundation/dwn/json-schemas/protocol-rule-set.json",
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "type": "object",
  "additionalProperties": false,
  "properties": {
    "$encryption": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "rootKeyId": {
          "type": "string"
        },
        "publicKeyJwk": {
          "$ref": "https://identity.foundation/dwn/json-schemas/public-jwk.json"
        }
      }
    },
    "$actions": {
      "type": "array",
      "minItems": 1,
      "items": {
        "type": "object",
        "oneOf": [
          {
            "required": [
              "who",
              "can"
            ],
            "additionalProperties": false,
            "properties": {
              "who": {
                "type": "string",
                "enum": [
                  "anyone",
                  "author",
                  "recipient"
                ]
              },
              "of": {
                "type": "string"
              },
              "can": {
                "type": "array",
                "minItems": 1,
                "items": {
                  "type": "string",
                  "enum": [
                    "co-delete",
                    "co-update",
                    "create",
                    "delete",
                    "read",
                    "update"
                  ]
                }
              }
            }
          },
          {
            "required": [
              "role",
              "can"
            ],
            "properties": {
              "role": {
                "$comment": "Must be the protocol path of a role record type",
                "type": "string"
              },
              "can": {
                "type": "array",
                "minItems": 1,
                "items": {
                  "type": "string",
                  "enum": [
                    "co-delete",
                    "co-update",
                    "create",
                    "delete",
                    "query",
                    "subscribe",
                    "read",
                    "update"
                  ]
                }
              }
            }
          }
        ]
      }
    },
    "$role": {
      "$comment": "When `true`, this turns a record into `role` that may be used within a context/sub-context",
      "type": "boolean"
    },
    "$size": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "min": {
          "type": "number",
          "minimum": 0
        },
        "max": {
          "type": "number",
          "minimum": 0
        }
      }
    },
    "$tags": {
      "type": "object",
      "minProperties": 1,
      "properties": {
        "$requiredTags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "$allowUndefinedTags": {
          "type": "boolean"
        }
      },
      "patternProperties": {
        "^(?!\\$requiredTags$|\\$allowUndefinedTags$).*$": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "type": {
              "enum": [
                "string",
                "number",
                "integer",
                "boolean",
                "array"
              ]
            },
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "enum": [
                    "string",
                    "number",
                    "integer"
                  ]
                }
              },
              "patternProperties": {
                "^(enum|minimum|maximum|exclusiveMinimum|exclusiveMaximum|minLength|maxLength)$": {}
              }
            },
            "contains": {
              "type": "object",
              "properties": {
                "type": {
                  "enum": [
                    "string",
                    "number",
                    "integer"
                  ]
                }
              },
              "patternProperties": {
                "^(enum|minimum|maximum|exclusiveMinimum|exclusiveMaximum|minLength|maxLength)$": {}
              }
            }
          },
          "patternProperties": {
            "^(enum|minimum|maximum|exclusiveMinimum|exclusiveMaximum|minLength|maxLength|minItems|maxItems|uniqueItems|minContains|maxContains)$": {}
          }
        }
      }
    },
    "$expiration": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "duration": {
          "type": "object",
          "properties": {
            "oneOf": [
              {
                "type": "object",
                "$comment": "Amount and unit represent a semantic duration of time using an amount (number) and a unit (character) to set an expiration date relative to record.dateCreated (e.g. 1s). Upon record query/read, this is converted to milliseconds, added to record.dateCreated to calculate dateExpiration and compared against original dateCreated.",
                "properties": {
                  "amount": {
                    "type": "number",
                    "$comment": ""
                  },
                  "unit": {
                    "type": "string",
                    "$comment": "Single char representing a unit of time. Must be one of: s (seconds), m (minutes), h (hours), d (days), y (years). E.g. 100s, 75m, 2d, 4y"
                  }
                }
              },
              {
                "type": "number",
                "minimum": 1,
                "$comment": "Numeric duration representing amount of milliseconds to wait from the record.dateCreated before records expire"
              }
            ]
          }
        }
      }
    }
  },
  "patternProperties": {
    "^[^$].*$": {
      "$ref": "https://identity.foundation/dwn/json-schemas/protocol-rule-set.json"
    }
  }
}